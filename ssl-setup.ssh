#!/bin/bash

# Sonrix Voice SSL Setup Script
# Let's Encrypt SSL certificate automation

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Configuration
DOMAIN="${1:-sonrix.tech}"
EMAIL="${2:-admin@sonrix.tech}"

if [[ -z "$DOMAIN" || -z "$EMAIL" ]]; then
    print_error "Usage: $0 <domain> <email>"
    print_error "Example: $0 sonrix.tech admin@sonrix.tech"
    exit 1
fi

print_status "Setting up SSL certificate for $DOMAIN"

# Check if domain resolves to this server
SERVER_IP=$(curl -s ipinfo.io/ip)
DOMAIN_IP=$(dig +short $DOMAIN)

if [[ "$SERVER_IP" != "$DOMAIN_IP" ]]; then
    print_warning "Domain $DOMAIN does not point to this server ($SERVER_IP vs $DOMAIN_IP)"
    read -p "Continue anyway? (y/N): " continue_setup
    if [[ "$continue_setup" != "y" && "$continue_setup" != "Y" ]]; then
        exit 1
    fi
fi

# Install certbot if not already installed
if ! command -v certbot &> /dev/null; then
    print_status "Installing certbot..."
    sudo snap install core
    sudo snap refresh core
    sudo snap install --classic certbot
    sudo ln -sf /snap/bin/certbot /usr/bin/certbot
fi

# Stop nginx temporarily
print_status "Stopping nginx temporarily..."
sudo systemctl stop nginx

# Get SSL certificate
print_status "Obtaining SSL certificate..."
sudo certbot certonly \
    --standalone \
    --non-interactive \
    --agree-tos \
    --email "$EMAIL" \
    --domains "$DOMAIN" \
    --rsa-key-size 4096

# Check if certificate was obtained
if [[ ! -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]]; then
    print_error "Failed to obtain SSL certificate"
    sudo systemctl start nginx
    exit 1
fi

print_status "SSL certificate obtained successfully"

# Update nginx configuration with SSL
print_status "Updating nginx configuration..."

# Create SSL-enabled nginx config
sudo tee /etc/nginx/sites-available/sonrix-voice > /dev/null << EOF
# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name $DOMAIN;
    
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        try_files \$uri =404;
    }
    
    location / {
        return 301 https://\$server_name\$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name $DOMAIN;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/$DOMAIN/chain.pem;
    
    # SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 10s;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Remove server tokens
    server_tokens off;
    
    # Client settings
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    keepalive_timeout 65s;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;
    
    # Static files
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
        log_not_found off;
    }
    
    # Socket.IO WebSocket connections
    location /socket.io/ {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # WebSocket specific settings
        proxy_cache_bypass \$http_upgrade;
        proxy_redirect off;
        proxy_buffering off;
        
        # Longer timeouts for WebSocket
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 300s;
    }
    
    # API routes
    location /api/ {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        proxy_redirect off;
        proxy_buffering off;
        
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Main application
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        proxy_cache_bypass \$http_upgrade;
        proxy_redirect off;
        proxy_buffering off;
        
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Health check
    location /health {
        access_log off;
        proxy_pass http://127.0.0.1:3000;
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }
    
    # Robots.txt
    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /admin\nDisallow: /api\nSitemap: https://$DOMAIN/sitemap.xml\n";
        access_log off;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Logging
    access_log /var/log/nginx/sonrix-voice.access.log combined buffer=16k flush=5s;
    error_log /var/log/nginx/sonrix-voice.error.log warn;
}
EOF

# Test nginx configuration
print_status "Testing nginx configuration..."
if ! sudo nginx -t; then
    print_error "Nginx configuration test failed"
    exit 1
fi

# Start nginx
print_status "Starting nginx..."
sudo systemctl start nginx
sudo systemctl enable nginx

# Setup automatic renewal
print_status "Setting up automatic SSL renewal..."
(crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet --post-hook 'systemctl reload nginx'") | crontab -

# Test SSL certificate
print_status "Testing SSL certificate..."
sleep 2
if curl -s -I "https://$DOMAIN" | grep -q "HTTP/2 200"; then
    print_status "SSL certificate is working correctly!"
else
    print_warning "SSL certificate test failed, but certificate was installed"
fi

print_status "SSL setup completed successfully!"
echo -e "${GREEN}✅ Your site is now available at: https://$DOMAIN${NC}"
echo -e "${GREEN}✅ Certificate will auto-renew${NC}"
echo -e "${GREEN}✅ Security headers are configured${NC}"

# Show certificate info
print_status "Certificate information:"
sudo certbot certificates -d "$DOMAIN"
